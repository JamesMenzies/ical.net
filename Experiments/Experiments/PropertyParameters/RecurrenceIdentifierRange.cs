using System;
using Experiments.Utilities;

namespace Experiments.PropertyParameters
{
    /// <summary>
    /// Parameter Name:  RANGE
    ///
    /// To specify the effective range of recurrence instances from the instance specified by the recurrence identifier specified by the property.
    ///
    /// Format Definition:  This property parameter is defined by the following notation:
    ///  rangeparam = "RANGE" "=" "THISANDFUTURE"
    ///   ; To specify the instance specified by the recurrence identifier and all subsequent recurrence instances.
    ///
    /// This parameter can be specified on a property that specifies a recurrence identifier. The parameter specifies the effective range of recurrence
    /// instances that is specified by the property.  The effective range is from the recurrence identifier specified by the property. If this parameter is not
    /// specified on an allowed property, then the default range is the single instance specified by the recurrence identifier value of the property. The
    /// parameter value can only be "THISANDFUTURE" to indicate a range defined by the recurrence identifier and all subsequent instances. The value
    /// "THISANDPRIOR" is deprecated by this revision of iCalendar and MUST NOT be generated by applications.
    /// </summary>
    /// <example>
    /// RECURRENCE-ID;RANGE=THISANDFUTURE:19980401T133000Z
    /// </example>
    public readonly struct RecurrenceIdentifierRange :
        IValueType
    {
        public string Name => "RANGE";
        public string Value { get; }
        public bool IsEmpty => Value is null;

        /// <summary>
        /// </summary>
        /// <param name="range">The only allowed value is THISANDFUTURE</param>
        /// <exception cref="ArgumentException"></exception>
        public RecurrenceIdentifierRange(string range)
        {
            if (string.IsNullOrWhiteSpace(range))
            {
                Value = null;
                return;
            }

            if (string.Equals(range, "THISANDFUTURE", StringComparison.OrdinalIgnoreCase))
            {
                Value = "THISANDFUTURE";
                return;
            }

            throw new ArgumentException($"{range} is not a valid range. The only valid range is 'THISANDFUTURE'");
        }

        public override string ToString() => this.NameEqualsValue();
    }
}